/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
-- The Common Table Expression(CTE) selects each SBR_UID and assigns a row number (row_num) based on the SBR_ID in descending order (ORDER BY SBR_ID DESC).
-- This assigns row_num = 1 to the latest inserted row for each SBR_UID.
WITH CTE AS (
  SELECT 
    SBR_ID,
    SBR_UID,
    ROW_NUMBER() OVER (PARTITION BY SBR_UID ORDER BY SBR_ID DESC) AS row_num
  FROM TD_SUBSCRIBER
)

-- Deletes rows from TD_SUBSCRIBER where SBR_ID matches those with row_num > 1.
-- This ensures that only the latest row for each SBR_UID remains.
DELETE FROM TD_SUBSCRIBER
WHERE SBR_ID IN (
  SELECT SBR_ID 
  FROM CTE 
  WHERE row_num > 1
);

-- Add Foreign keys that are missing from TD_MATRIX
IF NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'FK_TD_MATRIX_TD_AUDITING'
)
BEGIN
    ALTER TABLE TD_MATRIX  WITH CHECK ADD  CONSTRAINT FK_TD_MATRIX_TD_AUDITING FOREIGN KEY(MTR_DTG_ID)
    REFERENCES TD_AUDITING (DTG_ID)

    ALTER TABLE TD_MATRIX CHECK CONSTRAINT FK_TD_MATRIX_TD_AUDITING
END

IF NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'FK_TD_MATRIX_TD_RELEASE'
)
BEGIN
    ALTER TABLE TD_MATRIX  WITH CHECK ADD  CONSTRAINT FK_TD_MATRIX_TD_RELEASE FOREIGN KEY(MTR_RLS_ID)
    REFERENCES TD_RELEASE (RLS_ID)

    ALTER TABLE TD_MATRIX CHECK CONSTRAINT FK_TD_MATRIX_TD_RELEASE
END

IF NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'FK_TD_MATRIX_TS_COPYRIGHT'
)
BEGIN
    ALTER TABLE TD_MATRIX  WITH CHECK ADD  CONSTRAINT FK_TD_MATRIX_TS_COPYRIGHT FOREIGN KEY(MTR_CPR_ID)
    REFERENCES TS_COPYRIGHT ([CPR_ID])

    ALTER TABLE TD_MATRIX CHECK CONSTRAINT FK_TD_MATRIX_TS_COPYRIGHT
END

IF NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'FK_TD_MATRIX_TS_FORMAT'
)
BEGIN
    ALTER TABLE TD_MATRIX  WITH CHECK ADD  CONSTRAINT FK_TD_MATRIX_TS_FORMAT FOREIGN KEY(MTR_FRM_ID)
    REFERENCES TS_FORMAT (FRM_ID)

    ALTER TABLE TD_MATRIX CHECK CONSTRAINT FK_TD_MATRIX_TS_FORMAT
END


IF NOT EXISTS (
    SELECT 1
    FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
    WHERE CONSTRAINT_NAME = 'FK_TD_MATRIX_TS_LANGUAGE'
)
BEGIN
    ALTER TABLE TD_MATRIX  WITH CHECK ADD  CONSTRAINT FK_TD_MATRIX_TS_LANGUAGE FOREIGN KEY(MTR_LNG_ID)
    REFERENCES TS_LANGUAGE (LNG_ID)

    ALTER TABLE TD_MATRIX CHECK CONSTRAINT FK_TD_MATRIX_TS_LANGUAGE
END

-- Add default value of 0 for NLT_WIDGET and update all values that are null, in this column, to 0
IF NOT EXISTS (
	SELECT COLUMN_DEFAULT
	FROM INFORMATION_SCHEMA.COLUMNS
	WHERE TABLE_NAME = 'TD_ANALYTIC'
	  AND COLUMN_NAME = 'NLT_WIDGET'
)
BEGIN
    ALTER TABLE TD_ANALYTIC ADD DEFAULT ((0)) FOR NLT_WIDGET

    UPDATE TD_ANALYTIC
    SET NLT_WIDGET = 0
    WHERE NLT_WIDGET IS NULL
END

-- Remove the ALTER permission granted to the pxstat user on the TD_PERFORMANCE table
REVOKE ALTER 
ON OBJECT::TD_PERFORMANCE 
FROM pxstat
GO
